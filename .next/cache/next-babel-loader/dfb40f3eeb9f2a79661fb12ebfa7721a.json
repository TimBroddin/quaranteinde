{"ast":null,"code":"var _jsxFileName = \"/Users/timbroddin/Sites/quaranteinde/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from \"react\";\nimport Router from \"next/router\";\nimport Countdown from \"react-countdown\";\n\nconst renderer = ({\n  hours,\n  minutes,\n  seconds,\n  completed\n}) => {\n  if (completed) {\n    // Render a completed state\n    return __jsx(Completionist, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 12\n      }\n    });\n  } else {\n    // Render a countdown\n    return __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 7\n      }\n    }, hours, \":\", minutes, \":\", seconds);\n  }\n};\n\nconst Index = () => {\n  return __jsx(Countdown, {\n    date: new Date(2020, 3, 20),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 10\n    }\n  });\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/timbroddin/Sites/quaranteinde/pages/index.js"],"names":["React","useEffect","Router","Countdown","renderer","hours","minutes","seconds","completed","Index","Date"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,OAAT;AAAkBC,EAAAA,OAAlB;AAA2BC,EAAAA;AAA3B,CAAD,KAA4C;AAC3D,MAAIA,SAAJ,EAAe;AACb;AACA,WAAO,MAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAHD,MAGO;AACL;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGH,KADH,OACWC,OADX,OACqBC,OADrB,CADF;AAKD;AACF,CAZD;;AAcA,MAAME,KAAK,GAAG,MAAM;AAClB,SAAO,MAAC,SAAD;AAAW,IAAA,IAAI,EAAE,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB,CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CAFD;;AAIA,eAAeD,KAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport Router from \"next/router\";\nimport Countdown from \"react-countdown\";\n\nconst renderer = ({ hours, minutes, seconds, completed }) => {\n  if (completed) {\n    // Render a completed state\n    return <Completionist />;\n  } else {\n    // Render a countdown\n    return (\n      <span>\n        {hours}:{minutes}:{seconds}\n      </span>\n    );\n  }\n};\n\nconst Index = () => {\n  return <Countdown date={new Date(2020, 3, 20)} />;\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}