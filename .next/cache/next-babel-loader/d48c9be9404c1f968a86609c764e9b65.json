{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/timbroddin/Sites/quaranteinde/pages/index.js\";\n\nvar __jsx = React.createElement;\nimport React, { useEffect } from \"react\";\nimport Router from \"next/router\";\nimport Countdown from \"react-countdown\";\nimport Confetti from \"react-confetti\";\n\nvar renderer = function renderer(_ref) {\n  var days = _ref.days,\n      hours = _ref.hours,\n      minutes = _ref.minutes,\n      seconds = _ref.seconds,\n      completed = _ref.completed;\n\n  if (completed) {\n    // Render a completed state\n    return __jsx(Confetti, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 12\n      }\n    });\n  } else {\n    // Render a countdown\n    return __jsx(\"span\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 7\n      }\n    }, hours, \":\", minutes, \":\", seconds);\n  }\n};\n\nvar Index = function Index(_ref2) {\n  var language = _ref2.language;\n  useEffect(function () {}); //return <Countdown date={new Date(2020, 3, 20)} renderer={renderer} />;\n\n  return __jsx(Countdown, {\n    date: Date.now() + 5000,\n    renderer: renderer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 10\n    }\n  });\n};\n\nIndex.getInitialProps = function _callee(_ref3) {\n  var res, req;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          res = _ref3.res, req = _ref3.req;\n          console.log(\"initial\");\n          return _context.abrupt(\"return\", {});\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/timbroddin/Sites/quaranteinde/pages/index.js"],"names":["React","useEffect","Router","Countdown","Confetti","renderer","days","hours","minutes","seconds","completed","Index","language","Date","now","getInitialProps","res","req","console","log"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,QAAP,MAAqB,gBAArB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAAkD;AAAA,MAA/CC,IAA+C,QAA/CA,IAA+C;AAAA,MAAzCC,KAAyC,QAAzCA,KAAyC;AAAA,MAAlCC,OAAkC,QAAlCA,OAAkC;AAAA,MAAzBC,OAAyB,QAAzBA,OAAyB;AAAA,MAAhBC,SAAgB,QAAhBA,SAAgB;;AACjE,MAAIA,SAAJ,EAAe;AACb;AACA,WAAO,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAHD,MAGO;AACL;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGH,KADH,OACWC,OADX,OACqBC,OADrB,CADF;AAKD;AACF,CAZD;;AAcA,IAAME,KAAK,GAAG,SAARA,KAAQ,QAAkB;AAAA,MAAfC,QAAe,SAAfA,QAAe;AAC9BX,EAAAA,SAAS,CAAC,YAAM,CAAE,CAAT,CAAT,CAD8B,CAG9B;;AACA,SAAO,MAAC,SAAD;AAAW,IAAA,IAAI,EAAEY,IAAI,CAACC,GAAL,KAAa,IAA9B;AAAoC,IAAA,QAAQ,EAAET,QAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CALD;;AAOAM,KAAK,CAACI,eAAN,GAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,UAAAA,GAAT,SAASA,GAAT,EAAcC,GAAd,SAAcA,GAAd;AACtBC,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AADsB,2CAGf,EAHe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;;AAMA,eAAeR,KAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport Router from \"next/router\";\nimport Countdown from \"react-countdown\";\nimport Confetti from \"react-confetti\";\n\nconst renderer = ({ days, hours, minutes, seconds, completed }) => {\n  if (completed) {\n    // Render a completed state\n    return <Confetti />;\n  } else {\n    // Render a countdown\n    return (\n      <span>\n        {hours}:{minutes}:{seconds}\n      </span>\n    );\n  }\n};\n\nconst Index = ({ language }) => {\n  useEffect(() => {});\n\n  //return <Countdown date={new Date(2020, 3, 20)} renderer={renderer} />;\n  return <Countdown date={Date.now() + 5000} renderer={renderer} />;\n};\n\nIndex.getInitialProps = async ({ res, req }) => {\n  console.log(\"initial\");\n\n  return {};\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}