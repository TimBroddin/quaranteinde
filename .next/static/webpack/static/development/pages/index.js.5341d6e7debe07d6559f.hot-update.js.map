{"version":3,"file":"static/webpack/static/development/pages/index.js.5341d6e7debe07d6559f.hot-update.js","sources":["webpack:///./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","webpack:///./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","webpack:///./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","webpack:///./node_modules/@babel/runtime/helpers/esm/slicedToArray.js","webpack:///./pages/index.js"],"sourcesContent":["export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","import React, { useEffect } from \"react\";\nimport Router from \"next/router\";\nimport Countdown from \"react-countdown\";\nimport Confetti from \"react-confetti\";\nimport Head from \"next/head\";\nimport { strings } from \"../strings\";\nimport { useAnalytics } from \"../useAnalytics\";\n\nconst getString = (str, lang) => {\n  return strings[str][lang];\n};\n\nconst createRenderer = lang => {\n  return ({ days, hours, minutes, seconds, completed }) => {\n    if (completed) {\n      // Render a completed state\n      return <Confetti />;\n    } else {\n      // Render a countdown\n      return (\n        <>\n          <style jsx>{`\n            .text {\n              font-size: 50px;\n              text-align: center;\n            }\n          `}</style>\n          <div className=\"text\">\n            <strong>{days}</strong>{\" \"}\n            {getString(days === 1 ? \"day\" : \"days\", lang)},{\" \"}\n            <strong>{hours}</strong>{\" \"}\n            {getString(hours === 1 ? \"hour\" : \"hours\", lang)},{\" \"}\n            <strong>{minutes}</strong>{\" \"}\n            {getString(minutes === 1 ? \"minute\" : \"minutes\", lang)},{\" \"}\n            <strong>{seconds}</strong>{\" \"}\n            {getString(seconds === 1 ? \"second\" : \"seconds\", lang)}.\n          </div>\n        </>\n      );\n    }\n  };\n};\n\nconst Index = ({ language }) => {\n  useAnalytics();\n  const [loaded, setLoaded] = useState(false);\n  useEffect(() => {\n    setTimeout(() => {\n      setLoaded(true);\n    }, 50);\n  });\n\n  //return <Countdown date={new Date(2020, 3, 20)} renderer={renderer} />;\n  return (\n    <>\n      <Head>\n        <title>{getString(\"title\", language)}</title>\n        <link\n          rel=\"stylesheet\"\n          href=\"https://use.typekit.net/gyl2uxf.css\"\n        ></link>\n      </Head>\n      <style jsx>{`\n        .container {\n          margin: 0 auto;\n          margin-top: 100px;\n          width: 80vw;\n          text-align: center;\n\n          font-family: letter-gothic-std, monospace;\n\n          font-weight: 400;\n\n          font-style: normal;\n        }\n\n        .credit {\n          background-color: black;\n          color: white;\n          display: inline-block;\n          padding: 3px;\n          text-align: left;\n        }\n\n        .credit a {\n          color: white;\n        }\n      `}</style>\n      <div className=\"container\">\n        {loaded ? (\n          <Countdown\n            date={new Date(2020, 3, 20)}\n            renderer={createRenderer(language)}\n          />\n        ) : null}\n        <p>{getString(\"heading\", language)}</p>\n\n        <p className=\"credit\">{getString(\"credit\", language)}</p>\n      </div>\n    </>\n  );\n};\n\nIndex.getInitialProps = async ({ res, req }) => {\n  if (req && res) {\n    console.log(req.headers.host);\n    if (req.headers.host.indexOf(\"finquarantaine.be\") !== -1) {\n      return {\n        language: \"fr\"\n      };\n    } else {\n      return {\n        language: \"nl\"\n      };\n    }\n  } else {\n    return { language: \"nl\" };\n  }\n};\n\nexport default Index;\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;ACFA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC5BA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;AAAA;AAkCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AADA;AAKA;AADA;AACA;AALA;AAAA;AASA;AADA;AACA;AATA;AAAA;AAAA;AACA;AADA;AAAA;AAaA;AAAA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAgBA;;;;A","sourceRoot":""}