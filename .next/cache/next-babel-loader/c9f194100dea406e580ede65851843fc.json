{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/timbroddin/Sites/quaranteinde/pages/index.js\";\n\nvar __jsx = React.createElement;\nimport React, { useEffect } from \"react\";\nimport Router from \"next/router\";\nimport Countdown from \"react-countdown\";\nimport Confetti from \"react-confetti\";\n\nvar createRenderer = function createRenderer(lang) {\n  return function (_ref) {\n    var days = _ref.days,\n        hours = _ref.hours,\n        minutes = _ref.minutes,\n        seconds = _ref.seconds,\n        completed = _ref.completed;\n\n    if (completed) {\n      // Render a completed state\n      return __jsx(Confetti, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 14\n        }\n      });\n    } else {\n      // Render a countdown\n      return __jsx(\"span\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 9\n        }\n      }, hours, \":\", minutes, \":\", seconds);\n    }\n  };\n};\n\nvar Index = function Index(_ref2) {\n  var language = _ref2.language;\n  useEffect(function () {}); //return <Countdown date={new Date(2020, 3, 20)} renderer={renderer} />;\n\n  return __jsx(Countdown, {\n    date: Date.now() + 5000,\n    renderer: createRenderer(language),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  });\n};\n\nIndex.getInitialProps = function _callee(_ref3) {\n  var res, req;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          res = _ref3.res, req = _ref3.req;\n\n          if (!(req && res)) {\n            _context.next = 4;\n            break;\n          }\n\n          _context.next = 5;\n          break;\n\n        case 4:\n          return _context.abrupt(\"return\", {});\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/timbroddin/Sites/quaranteinde/pages/index.js"],"names":["React","useEffect","Router","Countdown","Confetti","createRenderer","lang","days","hours","minutes","seconds","completed","Index","language","Date","now","getInitialProps","res","req"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,QAAP,MAAqB,gBAArB;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,IAAI,EAAI;AAC7B,SAAO,gBAAkD;AAAA,QAA/CC,IAA+C,QAA/CA,IAA+C;AAAA,QAAzCC,KAAyC,QAAzCA,KAAyC;AAAA,QAAlCC,OAAkC,QAAlCA,OAAkC;AAAA,QAAzBC,OAAyB,QAAzBA,OAAyB;AAAA,QAAhBC,SAAgB,QAAhBA,SAAgB;;AACvD,QAAIA,SAAJ,EAAe;AACb;AACA,aAAO,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD,KAHD,MAGO;AACL;AACA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGH,KADH,OACWC,OADX,OACqBC,OADrB,CADF;AAKD;AACF,GAZD;AAaD,CAdD;;AAgBA,IAAME,KAAK,GAAG,SAARA,KAAQ,QAAkB;AAAA,MAAfC,QAAe,SAAfA,QAAe;AAC9BZ,EAAAA,SAAS,CAAC,YAAM,CAAE,CAAT,CAAT,CAD8B,CAG9B;;AACA,SACE,MAAC,SAAD;AAAW,IAAA,IAAI,EAAEa,IAAI,CAACC,GAAL,KAAa,IAA9B;AAAoC,IAAA,QAAQ,EAAEV,cAAc,CAACQ,QAAD,CAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAGD,CAPD;;AASAD,KAAK,CAACI,eAAN,GAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,UAAAA,GAAT,SAASA,GAAT,EAAcC,GAAd,SAAcA,GAAd;;AAAA,gBAClBA,GAAG,IAAID,GADW;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,2CAGb,EAHa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;;AAOA,eAAeL,KAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport Router from \"next/router\";\nimport Countdown from \"react-countdown\";\nimport Confetti from \"react-confetti\";\n\nconst createRenderer = lang => {\n  return ({ days, hours, minutes, seconds, completed }) => {\n    if (completed) {\n      // Render a completed state\n      return <Confetti />;\n    } else {\n      // Render a countdown\n      return (\n        <span>\n          {hours}:{minutes}:{seconds}\n        </span>\n      );\n    }\n  };\n};\n\nconst Index = ({ language }) => {\n  useEffect(() => {});\n\n  //return <Countdown date={new Date(2020, 3, 20)} renderer={renderer} />;\n  return (\n    <Countdown date={Date.now() + 5000} renderer={createRenderer(language)} />\n  );\n};\n\nIndex.getInitialProps = async ({ res, req }) => {\n  if (req && res) {\n  } else {\n    return {};\n  }\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}